{"version":3,"file":"data-image-png.js","sources":["../node_modules/pako/lib/zlib/adler32.js","../node_modules/pako/lib/zlib/crc32.js","../node_modules/pako/lib/zlib/inffast.js","../node_modules/pako/lib/zlib/inftrees.js","../node_modules/pako/lib/zlib/constants.js","../node_modules/pako/lib/zlib/inflate.js","../node_modules/pako/lib/utils/common.js","../node_modules/pako/lib/utils/strings.js","../node_modules/pako/lib/zlib/messages.js","../node_modules/pako/lib/zlib/zstream.js","../node_modules/pako/lib/zlib/gzheader.js","../node_modules/pako/lib/inflate.js","../node_modules/@uttori/data-tools/src/data-buffer.js","../node_modules/@uttori/data-tools/src/data-buffer-list.js","../node_modules/@uttori/data-tools/src/data-stream.js","../src/data-image-png.js"],"sourcesContent":["'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 30;       /* got a data error -- remain here until reset */\nconst TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nmodule.exports = inflate_table;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32       = require('./adler32');\nconst crc32         = require('./crc32');\nconst inflate_fast  = require('./inffast');\nconst inflate_table = require('./inftrees');\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH, Z_BLOCK, Z_TREES,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,\n  Z_DEFLATED\n} = require('./constants');\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n};\n\n\nmodule.exports.inflateReset = inflateReset;\nmodule.exports.inflateReset2 = inflateReset2;\nmodule.exports.inflateResetKeep = inflateResetKeep;\nmodule.exports.inflateInit = inflateInit;\nmodule.exports.inflateInit2 = inflateInit2;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateEnd = inflateEnd;\nmodule.exports.inflateGetHeader = inflateGetHeader;\nmodule.exports.inflateSetDictionary = inflateSetDictionary;\nmodule.exports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n","'use strict';\n\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nmodule.exports.assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nmodule.exports.flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n","// String encode/decode helpers\n'use strict';\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  let i, out;\n  const len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","'use strict';\n\n\nconst zlib_inflate = require('./zlib/inflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\nconst GZheader     = require('./zlib/gzheader');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');\n","/** @type {Function} */\nlet debug = () => {}; /* istanbul ignore next */ if (process.env.UTTORI_DATA_DEBUG) { try { debug = require('debug')('DataBuffer'); } catch {} }\n\n/**\n * Helper class for manipulating binary data.\n *\n * @property {Buffer|Uint8Array} data The data to process.\n * @property {number} length The size of the data in bytes.\n * @property {DataBuffer} next The next DataBuffer when part of a DataBufferList.\n * @property {DataBuffer} prev The previous DataBuffer when part of a DataBufferList.\n * @example <caption>new DataBuffer(stream)</caption>\n * const buffer = new DataBuffer(new Uint8Array([0xFC, 0x08]));\n * buffer.readUint8();\n * ➜ 0xFC\n * buffer.readUint8();\n * ➜ 0x08\n * @class\n */\nclass DataBuffer {\n/**\n * Creates an instance of DataBuffer.\n *\n * @param {Array|ArrayBuffer|Buffer|DataBuffer|Int8Array|Int16Array|number|string|Uint8Array|Uint32Array} input The data to process.\n * @throws {TypeError} Missing input data.\n * @throws {TypeError} Unknown type of input for DataBuffer: ${typeof input}\n */\n  constructor(input) {\n    if (!input) {\n      const error = 'Missing input data.';\n      debug(error);\n      throw new TypeError(error);\n    }\n    /** @type {Buffer|Uint8Array} The number of bytes avaliable to read. */\n    this.data = null;\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(input)) {\n      debug('constructor: from Buffer');\n      this.data = Buffer.from(input);\n    } else if (typeof input === 'string') {\n      debug('constructor: from string');\n      this.data = Buffer.from(input);\n    } else if (input instanceof Uint8Array) {\n      debug('constructor: from Uint8Array');\n      this.data = input;\n    } else if (input instanceof ArrayBuffer) {\n      debug('constructor: from ArrayBuffer');\n      this.data = new Uint8Array(input);\n    } else if (Array.isArray(input)) {\n      debug('constructor: Normal Array');\n      this.data = new Uint8Array(input);\n    } else if (typeof input === 'number') {\n      debug('constructor: Number (i.e. length)');\n      this.data = new Uint8Array(input);\n    } else if (input instanceof DataBuffer) {\n      debug('constructor: from DataBuffer, a shallow copy');\n      this.data = input.data;\n    } else if (input.buffer && input.buffer instanceof ArrayBuffer) {\n      debug('constructor: from typed arrays other than Uint8Array');\n      this.data = new Uint8Array(input.buffer, input.byteOffset, input.length * input.BYTES_PER_ELEMENT);\n    } else {\n      const error = `Unknown type of input for DataBuffer: ${typeof input}`;\n      debug(error);\n      throw new TypeError(error);\n    }\n\n    /** @type {number} The number of bytes avaliable to read. */\n    this.length = this.data.length;\n\n    // Used when the buffer is part of a bufferlist\n    /** @type {DataBuffer|null} The next DataBuffer in the list. */\n    this.next = null;\n    /** @type {DataBuffer|null} The previous DataBuffer in the list. */\n    this.prev = null;\n  }\n\n  /**\n   * Creates an instance of DataBuffer with given size.\n   *\n   * @param {number} size The size of the requested DataBuffer.\n   * @returns {DataBuffer} The new DataBuffer.\n   */\n  static allocate(size) {\n    debug('DataBuffer.allocate:', size);\n    return new DataBuffer(size);\n  }\n\n  /**\n   * Compares another DataBuffer against the current data buffer at a specified offset.\n   *\n   * @param {DataBuffer} input The size of the requested DataBuffer.\n   * @param {number} [offset=0] The size of the requested DataBuffer.\n   * @returns {boolean} Returns true when both DataBuffers are equal, false if there is any difference.\n   */\n  compare(input, offset = 0) {\n    // debug('compare:', input.length, offset);\n    const buffer = new DataBuffer(input);\n    const { length } = buffer;\n    /* istanbul ignore next */\n    if (!length) {\n      debug('compare: no input provided');\n      return false;\n    }\n    const local = this.slice(offset, length);\n    const { data } = buffer;\n    for (let i = 0; i < length; i++) {\n      if (local.data[i] !== data[i]) {\n        debug('compare: first failed match at', i);\n        return false;\n      }\n    }\n    debug('compare: data is the same');\n    return true;\n  }\n\n  /**\n   * Creates a copy of the current DataBuffer.\n   *\n   * @returns {DataBuffer} A new copy of the current DataBuffer.\n   */\n  copy() {\n    debug('copy');\n    return new DataBuffer(new Uint8Array(this.data));\n  }\n\n  /**\n   * Creates a copy of the current DataBuffer from a specified offset and a specified length.\n   *\n   * @param {number} position The starting offset to begin the copy of the new DataBuffer.\n   * @param {number} [length=this.length] The size of the new DataBuffer.\n   * @returns {DataBuffer} The new DataBuffer\n   */\n  slice(position, length = this.length) {\n    debug('slice:', position, length);\n    if ((position === 0) && (length >= this.length)) {\n      return new DataBuffer(this.data);\n    }\n    return new DataBuffer(this.data.subarray(position, position + length));\n  }\n}\n\nmodule.exports = DataBuffer;\n","/** @type {Function} */\nlet debug = () => {}; /* istanbul ignore next */ if (process.env.UTTORI_DATA_DEBUG) { try { debug = require('debug')('DataBufferList'); } catch {} }\nconst DataBuffer = require('./data-buffer');\n\n/**\n * A linked list of DataBuffers.\n *\n * @property {DataBuffer} first The first DataBuffer in the list.\n * @property {DataBuffer} last The last DataBuffer in the list.\n * @property {number} totalBuffers The number of buffers in the list.\n * @property {number} availableBytes The number of bytes avaliable to read.\n * @property {number} availableBuffers The number of buffers avaliable to read.\n * @example <caption>new DataBufferList(buffers)</caption>\n * const buffer = new DataBuffer(data);\n * const list = new DataBufferList([buffer]);\n * @class\n */\nclass DataBufferList {\n  /**\n   * Creates an instance of DataBufferList.\n   *\n   * @param {DataBuffer[]} [buffers] DataBuffers to initialize with.\n   */\n  constructor(buffers) {\n    debug('constructor');\n    /** @type {DataBuffer|null} The first DataBuffer in the list. */\n    this.first = null;\n    /** @type {DataBuffer|null} The last DataBuffer in the list. */\n    this.last = null;\n    /** @type {number} The number of buffers in the list. */\n    this.totalBuffers = 0;\n    /** @type {number} The number of bytes avaliable to read. */\n    this.availableBytes = 0;\n    /** @type {number} The number of buffers avaliable to read. */\n    this.availableBuffers = 0;\n\n    if (buffers && Array.isArray(buffers)) {\n      for (const buffer of buffers) {\n        this.append(buffer);\n      }\n    }\n  }\n\n  /**\n   * Creates a copy of the DataBufferList.\n   *\n   * @returns {DataBufferList} The copied DataBufferList.\n   */\n  copy() {\n    debug('copy');\n    const result = new DataBufferList();\n\n    result.first = this.first;\n    result.last = this.last;\n    result.totalBuffers = this.totalBuffers;\n    result.availableBytes = this.availableBytes;\n    result.availableBuffers = this.availableBuffers;\n\n    return result;\n  }\n\n  /**\n   * Appends a DataBuffer to the DataBufferList.\n   *\n   * @param {DataBuffer} buffer The DataBuffer to add to the list.\n   * @returns {number} The new number of buffers in the DataBufferList.\n   */\n  append(buffer) {\n    debug('append');\n    buffer.prev = this.last;\n    if (this.last) {\n      this.last.next = buffer;\n    }\n    this.last = buffer;\n    if (this.first == null) {\n      this.first = buffer;\n    }\n\n    this.availableBytes += buffer.length;\n    this.availableBuffers++;\n    this.totalBuffers++;\n\n    debug('append:', this.totalBuffers);\n    return this.totalBuffers;\n  }\n\n  /**\n   * Checks if we are on the last buffer in the list.\n   *\n   * @returns {boolean} Returns false if there are more buffers in the list, returns true when we are on the last buffer.\n   */\n  moreAvailable() {\n    if (this.first && this.first.next != null) {\n      debug('moreAvailable: true');\n      return true;\n    }\n\n    debug('moreAvailable: false');\n    return false;\n  }\n\n  /**\n   * Advance the buffer list to the next DataBuffer or to `null` when at the end of avaliable DataBuffers.\n   *\n   * If there is no next buffer, the current buffer is set to null.\n   *\n   * @returns {boolean} Returns false if there is no more buffers, returns true when the next buffer is set.\n   */\n  advance() {\n    debug('advance');\n    if (this.first) {\n      this.availableBytes -= this.first.length;\n      this.availableBuffers--;\n    }\n    if (this.first && this.first.next) {\n      debug('advance: advancing');\n      this.first = this.first.next;\n      return true;\n    }\n\n    debug('advance: nothing to advance to');\n    this.first = null;\n    return false;\n  }\n\n  /**\n   * Rewind the buffer list to the previous buffer.\n   *\n   * @returns {boolean} Returns false if there is no previous buffer, returns true when the previous buffer is set.\n   */\n  rewind() {\n    debug('rewind');\n    if (this.first && !this.first.prev) {\n      return false;\n    }\n\n    this.first = this.first ? this.first.prev : this.last;\n    /* istanbul ignore else */\n    if (this.first) {\n      this.availableBytes += this.first.length;\n      this.availableBuffers++;\n    }\n\n    return (this.first != null);\n  }\n\n  /**\n   * Reset the list to the beginning.\n   */\n  reset() {\n    debug('reset');\n    while (this.rewind()) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n  }\n}\n\nmodule.exports = DataBufferList;\n","/** @type {Function} */\nlet debug = () => {}; /* istanbul ignore next */ if (process.env.UTTORI_DATA_DEBUG) { try { debug = require('debug')('DataStream'); } catch {} }\nconst DataBuffer = require('./data-buffer');\nconst DataBufferList = require('./data-buffer-list');\n\n/**\n * Error thrown when insufficient bytes are avaliable to process.\n *\n * @example <caption>new UnderflowError(message)</caption>\n * throw new UnderflowError('Insufficient Bytes: 1');\n * @augments Error\n * @class\n */\nclass UnderflowError extends Error {\n  /**\n   * Creates a new UnderflowError.\n   *\n   * @param {string} message - Message to show when the error is thrown.\n   * @class\n   */\n  constructor(message) {\n    super(message);\n    this.name = 'UnderflowError';\n    this.stack = (new Error(message)).stack;\n    /* istanbul ignore else */\n    // https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\n/**\n * Helpter class to ease working with binary files.\n *\n * @property {number} size - ArrayBuffer byteLength\n * @property {ArrayBuffer} buf - Instance of ArrayBuffer used for the various typed arrays\n * @property {Uint8Array} uint8 - octet / uint8_t\n * @property {Int8Array} int8 - byte / int8_t\n * @property {Uint16Array} uint16 - unsigned short / uint16_t\n * @property {Int16Array} int16 - short / int16_t\n * @property {Uint32Array} uint32 - unsigned long / uint32_t\n * @property {Int32Array} int32 - long / int32_t\n * @property {Float32Array} float32 - unrestricted float / float\n * @property {Float64Array} float64 - unrestricted double / double\n * @property {BigInt64Array} int64 - bigint / int64_t (signed long long)\n * @property {BigUint64Array} uint64 - bigint / uint64_t (unsigned long long)\n * @property {boolean} nativeEndian - Native Endianness of the machine, true is Little Endian, false is Big Endian\n * @property {DataBufferList} list - The DataBufferList to process\n * @property {number} localOffset - Reading offset for the current chunk\n * @property {number} offset - Reading offset for all chunks\n * @example <caption>new DataStream(list, options)</caption>\n * @class\n */\nclass DataStream {\n  /**\n   * Creates a new DataStream.\n   *\n   * @param {DataBufferList} list - The DataBufferList to process\n   * @param {object} options - Options for this instance\n   * @param {number} [options.size=16] - ArrayBuffer byteLength for the underlying binary parsing\n   */\n  constructor(list, options = {}) {\n    options.size = options.size || 16;\n    if (options && options.size % 8 !== 0) {\n      options.size += (8 - (options.size % 8));\n    }\n    /** @type {number} ArrayBuffer byteLength */\n    this.size = options.size;\n    /** @type {ArrayBuffer} Instance of ArrayBuffer used for the various typed arrays */\n    this.buf = new ArrayBuffer(this.size);\n    /** @type {Uint8Array} octet / uint8_t */\n    this.uint8 = new Uint8Array(this.buf);\n    /** @type {Int8Array} byte / int8_t */\n    this.int8 = new Int8Array(this.buf);\n    /** @type {Uint16Array} unsigned short / uint16_t */\n    this.uint16 = new Uint16Array(this.buf);\n    /** @type {Int16Array} short / int16_t */\n    this.int16 = new Int16Array(this.buf);\n    /** @type {Uint32Array} unsigned long / uint32_t */\n    this.uint32 = new Uint32Array(this.buf);\n    /** @type {Int32Array} long / int32_t */\n    this.int32 = new Int32Array(this.buf);\n    /** @type {Float32Array} unrestricted float / float */\n    this.float32 = new Float32Array(this.buf);\n    /** @type {Float64Array} unrestricted double / double */\n    this.float64 = new Float64Array(this.buf);\n    /** @type {BigInt64Array} bigint / int64_t (signed long long) */\n    this.int64 = new BigInt64Array(this.buf);\n    /** @type {BigUint64Array} bigint / uint64_t (unsigned long long) */\n    this.uint64 = new BigUint64Array(this.buf);\n\n    /** @type {boolean} Native Endianness of the machine, true is Little Endian, false is Big Endian */\n    this.nativeEndian = new Uint16Array(new Uint8Array([0x12, 0x34]).buffer)[0] === 0x3412;\n\n    /** @type {DataBufferList} The DataBufferList to process */\n    this.list = list;\n    /** @type {number} Reading offset for the current chunk */\n    this.localOffset = 0;\n    /** @type {number} Reading offset for all chunks */\n    this.offset = 0;\n  }\n\n  /**\n   * Creates a new DataStream from file data.\n   *\n   * @param {string | Buffer} data - The data of the image to process.\n   * @returns {DataStream} The new DataStream instance for the provided file data.\n   * @static\n   */\n  static fromData(data) {\n    const buffer = new DataBuffer(data);\n    const list = new DataBufferList();\n    list.append(buffer);\n    return new DataStream(list, { size: buffer.length });\n  }\n\n  /**\n   * Creates a new DataStream from a DataBuffer.\n   *\n   * @param {DataBuffer} buffer - The DataBuffer of the image to process.\n   * @returns {DataStream} The new DataStream instance for the provided DataBuffer.\n   * @static\n   */\n  static fromBuffer(buffer) {\n    const list = new DataBufferList();\n    list.append(buffer);\n    return new DataStream(list, { size: buffer.length });\n  }\n\n  /**\n   * Compares input data against the current data.\n   *\n   * @param {DataStream} input - The DataStream to compare against.\n   * @param {number} [offset=0] - The offset to begin comparing at.\n   * @returns {boolean} - True if the data is the same as the input, starting at the offset, false is there is any difference.\n   */\n  compare(input, offset = 0) {\n    if (!input || !input.list || !input.list.availableBytes) {\n      debug('compare: no input provided');\n      return false;\n    }\n    let { availableBytes } = input.list;\n    debug('compare', availableBytes, offset);\n    if (offset) {\n      availableBytes -= offset;\n      this.seek(offset);\n      input.seek(offset);\n    }\n    let local;\n    let external;\n    for (let i = 0; i < availableBytes; i++) {\n      local = this.readUInt8();\n      external = input.readUInt8();\n      if (local !== external) {\n        debug('compare: first failed match at', i);\n        return false;\n      }\n      debug('compare: match at', i);\n    }\n    return true;\n  }\n\n  /**\n   * Compares input data against the upcoming data, byte by byte.\n   *\n   * @param {number[] | Buffer} input - The data to check for in upcoming bytes.\n   * @returns {boolean} - True if the data is the upcoming data, false if it is not or there is not enough buffer remaining.\n   */\n  next(input) {\n    debug('next:', input);\n    if (!input || typeof input.length !== 'number' || input.length === 0) {\n      debug('next: no input provided');\n      return false;\n    }\n    if (!this.available(input.length)) {\n      debug(`Insufficient Bytes: ${input.length} <= ${this.remainingBytes()}`);\n      return false;\n    }\n\n    debug('next: this.offset =', this.offset);\n    for (let i = 0; i < input.length; i++) {\n      const data = this.peekUInt8(this.offset + i);\n      if (input[i] !== data) {\n        debug('next: first failed match at', i, ', where:', input[i], '!==', data);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Create a copy of the current DataStream and offset.\n   *\n   * @returns {DataStream} - A new copy of the DataStream.\n   */\n  copy() {\n    const result = new DataStream(this.list.copy(), { size: this.size });\n    result.localOffset = this.localOffset;\n    result.offset = this.offset;\n    return result;\n  }\n\n  // TODO Can `availableAt` replace `available`?\n  /**\n   * Checks if a given number of bytes are avaliable in the stream.\n   *\n   * @param {number} bytes The number of bytes to check for.\n   * @returns {boolean} True if there are the requested amount, or more, of bytes left in the stream.\n   */\n  available(bytes) {\n    return bytes <= this.remainingBytes();\n  }\n\n  /**\n   * Checks if a given number of bytes are avaliable after a given offset in the stream.\n   *\n   * @param {number} bytes The number of bytes to check for.\n   * @param {number} offset The offset to start from.\n   * @returns {boolean} - True if there are the requested amount, or more, of bytes left in the stream.\n   */\n  availableAt(bytes, offset) {\n    return bytes <= this.list.availableBytes - offset;\n  }\n\n  /**\n   * Returns the remaining bytes in the stream.\n   *\n   * @returns {number} The remaining bytes in the stream.\n   */\n  remainingBytes() {\n    return this.list.availableBytes - this.localOffset;\n  }\n\n  /**\n   * Advance the stream by a given number of bytes. Useful for skipping unused bytes.\n   *\n   * @param {number} bytes The number of bytes to advance.\n   * @returns {DataStream} The current DataStream.\n   * @throws {UnderflowError} Insufficient Bytes in the stream.\n   */\n  advance(bytes) {\n    debug('advance:', bytes);\n    if (!this.available(bytes)) {\n      throw new UnderflowError(`Insufficient Bytes: ${bytes} <= ${this.remainingBytes()}`);\n    }\n\n    this.localOffset += bytes;\n    this.offset += bytes;\n\n    while (this.list.first && (this.localOffset >= this.list.first.length) && this.list.moreAvailable()) {\n      debug('advance: end of the list, advancing list');\n      this.localOffset -= this.list.first.length;\n      this.list.advance();\n    }\n\n    return this;\n  }\n\n  /**\n   * Rewind the stream by a given number of bytes.\n   *\n   * @param {number} bytes The number of bytes to go back.\n   * @returns {DataStream} The current DataStream.\n   * @throws {UnderflowError} Insufficient Bytes in the stream.\n   */\n  rewind(bytes) {\n    if (bytes > this.offset) {\n      throw new UnderflowError(`Insufficient Bytes: ${bytes} > ${this.offset}`);\n    }\n\n    // If we're at the end of the bufferlist, seek from the end\n    // if (!this.list.first) {\n    //   this.list.rewind();\n    //   this.localOffset = this.list.first.length;\n    // }\n\n    this.localOffset -= bytes;\n    this.offset -= bytes;\n\n    while (this.list.first.prev && (this.localOffset < 0)) {\n      this.list.rewind();\n      this.localOffset += this.list.first.length;\n    }\n\n    return this;\n  }\n\n  /**\n   * Go to a specified offset in the stream.\n   *\n   * @param {number} position The offset to go to.\n   * @returns {DataStream} The current DataStream.\n   */\n  seek(position) {\n    if (position > this.offset) {\n      return this.advance(position - this.offset);\n    }\n    if (position < this.offset) {\n      return this.rewind(this.offset - position);\n    }\n    return this;\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @returns {*} The UInt8 value at the current offset.\n   * @throws {UnderflowError} Insufficient Bytes in the stream.\n   */\n  readUInt8() {\n    if (!this.available(1)) {\n      throw new UnderflowError('Insufficient Bytes: 1');\n    }\n\n    const output = this.list.first.data[this.localOffset];\n    this.localOffset += 1;\n    this.offset += 1;\n\n    // Advance to the next item in the list if we are at the end.\n    if (this.localOffset === this.list.first.length) {\n      this.localOffset = 0;\n      this.list.advance();\n    }\n\n    return output;\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @returns {*} The UInt8 value at the current offset.\n   * @throws {UnderflowError} Insufficient Bytes in the stream.\n   */\n  peekUInt8(offset = 0) {\n    if (!this.availableAt(1, offset)) {\n      throw new UnderflowError(`Insufficient Bytes: ${offset} + 1`);\n    }\n    let buffer = this.list.first;\n\n    while (buffer) {\n      if (buffer.length > offset) {\n        return buffer.data[offset];\n      }\n\n      offset -= buffer.length;\n      buffer = buffer.next;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {number} bytes The number of bytes to read.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {Uint8Array} - The UInt8 value at the current offset.\n   */\n  read(bytes, littleEndian = false) {\n    // debug('read:', bytes, this.offset, littleEndian);\n    if (littleEndian === this.nativeEndian) {\n      for (let i = 0; i < bytes; i++) {\n        this.uint8[i] = this.readUInt8();\n      }\n    } else {\n      for (let i = bytes - 1; i >= 0; i--) {\n        this.uint8[i] = this.readUInt8();\n      }\n    }\n    // eslint-disable-next-line sonarjs/prefer-immediate-return\n    const output = this.uint8.slice(0, bytes);\n    // debug('read =', output.toString('hex'));\n    return output;\n  }\n\n  /**\n   * Read from the provided offset and return the value.\n   *\n   * @param {number} bytes The number of bytes to read.\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The UInt8 value at the current offset.\n   */\n  peek(bytes, offset = 0, littleEndian = false) {\n    // debug('peek:', bytes, offset, littleEndian);\n    if (littleEndian === this.nativeEndian) {\n      for (let i = 0; i < bytes; i++) {\n        this.uint8[i] = this.peekUInt8(offset + i);\n      }\n    } else {\n      for (let i = 0; i < bytes; i++) {\n        this.uint8[bytes - i - 1] = this.peekUInt8(offset + i);\n      }\n    }\n    // eslint-disable-next-line sonarjs/prefer-immediate-return\n    const output = this.uint8.slice(0, bytes);\n    // debug('peek =', output.toString('hex'));\n    return output;\n  }\n\n  /**\n   * Read the bits from the bytes from the provided offset and return the value.\n   *\n   * @param {number} position The bit position to read, 0 to 7.\n   * @param {number} [length=1] The number of bits to read, 1 to 8.\n   * @param {number} [offset=0] The offset to read from.\n   * @returns {number} The value at the provided bit position of a provided length at the provided offset.\n   * @throws {Error} peekBit position is invalid: ${position}, must be an Integer between 0 and 7\n   * @throws {Error} `peekBit length is invalid: ${length}, must be an Integer between 1 and 8\n   */\n  peekBit(position, length = 1, offset = 0) {\n    // debug('peekBit:', position, length, offset);\n    if (Number.isNaN(position) || !Number.isInteger(position) || position < 0 || position > 7) {\n      throw new Error(`peekBit position is invalid: ${position}, must be an Integer between 0 and 7`);\n    }\n    if (Number.isNaN(length) || !Number.isInteger(length) || length < 1 || length > 8) {\n      throw new Error(`peekBit length is invalid: ${length}, must be an Integer between 1 and 8`);\n    }\n    const value = this.peekUInt8(offset);\n    return ((value << position) & 0xFF) >>> (8 - length);\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @returns {*} The Int8 value at the current offset.\n   */\n  readInt8() {\n    this.read(1);\n    return this.int8[0];\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @returns {*} The Int8 value at the current offset.\n   */\n  peekInt8(offset = 0) {\n    this.peek(1, offset);\n    return this.int8[0];\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The UInt16 value at the current offset.\n   */\n  readUInt16(littleEndian) {\n    this.read(2, littleEndian);\n    return this.uint16[0];\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Int8 value at the current offset.\n   */\n  peekUInt16(offset = 0, littleEndian = false) {\n    this.peek(2, offset, littleEndian);\n    return this.uint16[0];\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Int16 value at the current offset.\n   */\n  readInt16(littleEndian = false) {\n    this.read(2, littleEndian);\n    return this.int16[0];\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Int16 value at the current offset.\n   */\n  peekInt16(offset = 0, littleEndian = false) {\n    this.peek(2, offset, littleEndian);\n    return this.int16[0];\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The UInt24 value at the current offset.\n   */\n  readUInt24(littleEndian = false) {\n    if (littleEndian) {\n      return this.readUInt16(true) + (this.readUInt8() << 16);\n    }\n    return (this.readUInt16() << 8) + this.readUInt8();\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The UInt24 value at the current offset.\n   */\n  peekUInt24(offset = 0, littleEndian = false) {\n    if (littleEndian) {\n      return this.peekUInt16(offset, true) + (this.peekUInt8(offset + 2) << 16);\n    }\n    return (this.peekUInt16(offset) << 8) + this.peekUInt8(offset + 2);\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Int24 value at the current offset.\n   */\n  readInt24(littleEndian = false) {\n    if (littleEndian) {\n      return this.readUInt16(true) + (this.readInt8() << 16);\n    }\n    return (this.readInt16() << 8) + this.readUInt8();\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Int24 value at the current offset.\n   */\n  peekInt24(offset = 0, littleEndian = false) {\n    if (littleEndian) {\n      return this.peekUInt16(offset, true) + (this.peekInt8(offset + 2) << 16);\n    }\n    return (this.peekInt16(offset) << 8) + this.peekUInt8(offset + 2);\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The UInt32 value at the current offset.\n   */\n  readUInt32(littleEndian = false) {\n    this.read(4, littleEndian);\n    return this.uint32[0];\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The UInt32 value at the current offset.\n   */\n  peekUInt32(offset = 0, littleEndian = false) {\n    this.peek(4, offset, littleEndian);\n    return this.uint32[0];\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Int32 value at the current offset.\n   */\n  readInt32(littleEndian = false) {\n    this.read(4, littleEndian);\n    return this.int32[0];\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Int32 value at the current offset.\n   */\n  peekInt32(offset = 0, littleEndian = false) {\n    this.peek(4, offset, littleEndian);\n    return this.int32[0];\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Float32 value at the current offset.\n   */\n  readFloat32(littleEndian = false) {\n    this.read(4, littleEndian);\n    return this.float32[0];\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Float32 value at the current offset.\n   */\n  peekFloat32(offset = 0, littleEndian = false) {\n    this.peek(4, offset, littleEndian);\n    return this.float32[0];\n  }\n\n  /**\n   * Read from the current offset and return the Turbo Pascal 48 bit extended float value.\n   * May be faulty with large numbers due to float percision.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {number} The Float48 value at the current offset.\n   */\n  readFloat48(littleEndian = false) {\n    this.read(6, littleEndian);\n    return this.float48();\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the Turbo Pascal 48 bit extended float value.\n   * May be faulty with large numbers due to float percision.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {number} The Float48 value at the specified offset.\n   */\n  peekFloat48(offset, littleEndian = false) {\n    this.peek(6, offset, littleEndian);\n    return this.float48();\n  }\n\n  /**\n   * Read from the current offset and return the value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Float64 value at the current offset.\n   */\n  readFloat64(littleEndian = false) {\n    this.read(8, littleEndian);\n    return this.float64[0];\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Float64 value at the current offset.\n   */\n  peekFloat64(offset = 0, littleEndian = false) {\n    this.peek(8, offset, littleEndian);\n    return this.float64[0];\n  }\n\n  /**\n   * Read from the current offset and return the IEEE 80 bit extended float value.\n   *\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Float80 value at the current offset.\n   */\n  readFloat80(littleEndian = false) {\n    this.read(10, littleEndian);\n    return this.float80();\n  }\n\n  /**\n   * Read from the specified offset without advancing the offsets and return the IEEE 80 bit extended float value.\n   *\n   * @param {number} [offset=0] The offset to read from.\n   * @param {boolean} [littleEndian=false] Read in Little Endian format.\n   * @returns {*} The Float80 value at the current offset.\n   */\n  peekFloat80(offset = 0, littleEndian = false) {\n    this.peek(10, offset, littleEndian);\n    return this.float80();\n  }\n\n  /**\n   * Read from the current offset and return the value as a DataBuffer.\n   *\n   * @param {number} length The number of bytes to read.\n   * @returns {DataBuffer} The requested number of bytes as a DataBuffer.\n   */\n  readBuffer(length) {\n    const result = DataBuffer.allocate(length);\n    const to = result.data;\n\n    for (let i = 0; i < length; i++) {\n      to[i] = this.readUInt8();\n    }\n\n    return result;\n  }\n\n  /**\n   * Read from the specified offset and return the value as a DataBuffer.\n   *\n   * @param {number} offset The offset to read from.\n   * @param {number} length The number of bytes to read.\n   * @returns {DataBuffer} The requested number of bytes as a DataBuffer.\n   */\n  peekBuffer(offset, length) {\n    const result = DataBuffer.allocate(length);\n    const to = result.data;\n\n    for (let i = 0; i < length; i++) {\n      to[i] = this.peekUInt8(offset + i);\n    }\n\n    return result;\n  }\n\n  /**\n   * Read from the current offset of the current buffer for a given length and return the value as a DataBuffer.\n   *\n   * @param {number} length The number of bytes to read.\n   * @returns {DataBuffer} The requested number of bytes as a DataBuffer.\n   */\n  readSingleBuffer(length) {\n    debug('readSingleBuffer:', length);\n    const result = this.list.first.slice(this.localOffset, length);\n    this.advance(result.length);\n    return result;\n  }\n\n  /**\n   * Read from the specified offset of the current buffer for a given length and return the value as a DataBuffer.\n   *\n   * @param {number} offset The offset to read from.\n   * @param {number} length The number of bytes to read.\n   * @returns {DataBuffer} The requested number of bytes as a DataBuffer.\n   */\n  peekSingleBuffer(offset, length) {\n    debug('peekSingleBuffer:', offset, length);\n    return this.list.first.slice(this.localOffset + offset, length);\n  }\n\n  /**\n   * Read from the current offset for a given length and return the value as a string.\n   *\n   * @param {number} length The number of bytes to read.\n   * @param {string} [encoding=ascii] The encoding of the string.\n   * @returns {string} The read value as a string.\n   */\n  readString(length, encoding = 'ascii') {\n    return this.decodeString(this.offset, length, encoding, true);\n  }\n\n  /**\n   * Read from the specified offset for a given length and return the value as a string.\n   *\n   * @param {number} offset The offset to read from.\n   * @param {number} length The number of bytes to read.\n   * @param {string} [encoding=ascii] The encoding of the string.\n   * @returns {string} The read value as a string.\n   */\n  peekString(offset, length, encoding = 'ascii') {\n    return this.decodeString(offset, length, encoding, false);\n  }\n\n  /**\n   * Convert the current buffer into a Turbo Pascal 48 bit float value.\n   * May be faulty with large numbers due to float percision.\n   *\n   * While most languages use a 32-bit or 64-bit floating point decimal variable, usually called single or double,\n   * Turbo Pascal featured an uncommon 48-bit float called a real which served the same function as a float.\n   *\n   * The Real48 type exists for backward compatibility with Turbo Pascal. It defines a 6-byte floating-point type.\n   * The Real48 type has an 8-bit exponent and a 39-bit normalized mantissa. It cannot store denormalized values, infinity, or not-a-number. If the exponent is zero, the number is zero.\n   *\n   * Structure (Bytes, Big Endian)\n   * 5: SMMMMMMM 4: MMMMMMMM 3: MMMMMMMM 2: MMMMMMMM 1: MMMMMMMM 0: EEEEEEEE\n   *\n   * Structure (Bytes, Little Endian)\n   * 0: EEEEEEEE 1: MMMMMMMM 2: MMMMMMMM 3: MMMMMMMM 4: MMMMMMMM 5: SMMMMMMM\n   *\n   * E[8]: Exponent\n   * M[39]: Mantissa\n   * S[1]: Sign\n   *\n   * Value: (-1)^s * 2^(e - 129) * (1.f)\n   *\n   * @returns {number} The read value as a number.\n   * @see {@link http://www.shikadi.net/moddingwiki/Turbo_Pascal_Real|Turbo Pascal Real}\n   */\n  float48() {\n    let mantissa = 0;\n\n    // Bias is 129, which is 0x81\n    let exponent = this.uint8[0];\n    if (exponent === 0) {\n      return 0;\n    }\n    exponent = this.uint8[0] - 0x81;\n\n    for (let i = 1; i <= 4; i++) {\n      mantissa += this.uint8[i];\n      mantissa /= 256;\n    }\n    mantissa += (this.uint8[5] & 0x7F);\n    mantissa /= 128;\n    mantissa += 1;\n\n    // Sign bit check\n    if (this.uint8[5] & 0x80) {\n      mantissa = -mantissa;\n    }\n\n    const output = mantissa * (2 ** exponent);\n    return Number.parseFloat(output.toFixed(4));\n  }\n\n  /**\n   * Convert the current buffer into an IEEE 80 bit extended float value.\n   *\n   * @returns {number} The read value as a number.\n   * @see {@link https://en.wikipedia.org/wiki/Extended_precision|Extended_Precision}\n   */\n  float80() {\n    const [high, low] = [...this.uint32];\n    const a0 = this.uint8[9];\n    const a1 = this.uint8[8];\n\n    // 1 bit sign, -1 or +1\n    const sign = 1 - ((a0 >>> 7) * 2);\n    // 15 bit exponent\n    // let exponent = (((a0 << 1) & 0xFF) << 7) | a1;\n    let exponent = ((a0 & 0x7F) << 8) | a1;\n\n    if ((exponent === 0) && (low === 0) && (high === 0)) {\n      return 0;\n    }\n\n    // 0x7FFF is a reserved value\n    if (exponent === 0x7FFF) {\n      if ((low === 0) && (high === 0)) {\n        return sign * Number.POSITIVE_INFINITY;\n      }\n\n      return Number.NaN;\n    }\n\n    // Bias is 16383, which is 0x3FFF\n    exponent -= 0x3FFF;\n    let out = low * 2 ** (exponent - 31);\n    out += high * 2 ** (exponent - 63);\n\n    return sign * out;\n  }\n\n  /**\n   * Resets the instance offsets to 0.\n   *\n   * @memberof DataStream\n   */\n  reset() {\n    this.localOffset = 0;\n    this.offset = 0;\n  }\n\n  /**\n   * Read from the specified offset for a given length and return the value as a string in a specified encoding, and optionally advance the offsets.\n   * Supported Encodings: ascii / latin1, utf8 / utf-8, utf16-be, utf16be, utf16le, utf16-le, utf16bom, utf16-bom\n   *\n   * @private\n   * @param {number} offset The offset to read from.\n   * @param {number} length The number of bytes to read, if not defined it is the remaining bytes in the buffer.\n   * @param {string} encoding The encoding of the string.\n   * @param {boolean} advance Flag to optionally advance the offsets.\n   * @returns {string} The read value as a string.\n   */\n  decodeString(offset, length, encoding, advance) {\n    encoding = encoding.toLowerCase();\n    const nullEnd = length === null ? 0 : -1;\n\n    if (!length) {\n      length = this.remainingBytes();\n    }\n\n    const end = offset + length;\n    let result = '';\n\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1': {\n        while (offset < end) {\n          const char = this.peekUInt8(offset++);\n          if (char === nullEnd) {\n            break;\n          }\n          result += String.fromCharCode(char);\n        }\n        break;\n      }\n      case 'utf8':\n      case 'utf-8': {\n        while (offset < end) {\n          const b1 = this.peekUInt8(offset++);\n          if (b1 === nullEnd) {\n            break;\n          }\n          let b2;\n          let b3;\n          /* istanbul ignore else */\n          if ((b1 & 0x80) === 0) {\n            result += String.fromCharCode(b1);\n          } else if ((b1 & 0xE0) === 0xC0) {\n            // one continuation (128 to 2047)\n            b2 = this.peekUInt8(offset++) & 0x3F;\n            result += String.fromCharCode(((b1 & 0x1F) << 6) | b2);\n          } else if ((b1 & 0xF0) === 0xE0) {\n            // two continuation (2048 to 55295 and 57344 to 65535)\n            b2 = this.peekUInt8(offset++) & 0x3F;\n            b3 = this.peekUInt8(offset++) & 0x3F;\n            result += String.fromCharCode(((b1 & 0x0F) << 12) | (b2 << 6) | b3);\n          } else if ((b1 & 0xF8) === 0xF0) {\n            // three continuation (65536 to 1114111)\n            b2 = this.peekUInt8(offset++) & 0x3F;\n            b3 = this.peekUInt8(offset++) & 0x3F;\n            const b4 = this.peekUInt8(offset++) & 0x3F;\n\n            // split into a surrogate pair\n            const pt = (((b1 & 0x0F) << 18) | (b2 << 12) | (b3 << 6) | b4) - 0x10000;\n            result += String.fromCharCode(0xD800 + (pt >> 10), 0xDC00 + (pt & 0x3FF));\n          }\n        }\n        break;\n      }\n      case 'utf16-be':\n      case 'utf16be':\n      case 'utf16le':\n      case 'utf16-le':\n      case 'utf16bom':\n      case 'utf16-bom': {\n        let littleEndian;\n\n        // find endianness\n        switch (encoding) {\n          case 'utf16be':\n          case 'utf16-be': {\n            littleEndian = false;\n            break;\n          }\n          case 'utf16le':\n          case 'utf16-le': {\n            littleEndian = true;\n            break;\n          }\n          case 'utf16bom':\n          case 'utf16-bom':\n          default: {\n            const bom = this.peekUInt16(offset);\n            if ((length < 2) || (bom === nullEnd)) {\n              if (advance) {\n                this.advance(offset += 2);\n              }\n              return result;\n            }\n\n            littleEndian = bom === 0xFFFE;\n            offset += 2;\n            break;\n          }\n        }\n\n        let w1;\n        // eslint-disable-next-line no-cond-assign\n        while ((offset < end) && ((w1 = this.peekUInt16(offset, littleEndian)) !== nullEnd)) {\n          offset += 2;\n\n          if ((w1 < 0xD800) || (w1 > 0xDFFF)) {\n            result += String.fromCharCode(w1);\n          } else {\n            const w2 = this.peekUInt16(offset, littleEndian);\n            if ((w2 < 0xDC00) || (w2 > 0xDFFF)) {\n              throw new Error('Invalid utf16 sequence.');\n            }\n\n            result += String.fromCharCode(w1, w2);\n            offset += 2;\n          }\n        }\n\n        if (w1 === nullEnd) {\n          offset += 2;\n        }\n        break;\n      }\n      default: {\n        throw new Error(`Unknown encoding: ${encoding}`);\n      }\n    }\n\n    if (advance) {\n      this.advance(length);\n    }\n    return result;\n  }\n}\n\nmodule.exports = DataStream;\n","/* eslint-disable node/no-missing-require */\n/* eslint-disable import/no-unresolved */\n/** @type {Function} */\nlet debug = () => {}; /* istanbul ignore next */ if (process.env.UTTORI_IMAGEPNG_DEBUG) { try { debug = require('debug')('ImagePNG'); } catch {} }\nconst zlib = require('zlib');\nconst DataBuffer = require('@uttori/data-tools/data-buffer');\nconst DataBufferList = require('@uttori/data-tools/data-buffer-list');\nconst DataStream = require('@uttori/data-tools/data-stream');\n\n/**\n * PNG Decoder\n *\n * @property {number} width - Pixel Width\n * @property {number} height - Pixel Height\n * @property {number} bitDepth - Image Bit Depth, one of: 1, 2, 4, 8, 16\n * @property {number} colorType = Defines pixel structure, one of: 0, 2, 3, 4, 6\n * @property {number} compressionMethod - Type of compression, always 0\n * @property {number} filterMethod - Type of filtering, always 0\n * @property {number} interlaceMethod - Type of interlacing, one of: 0, 1\n * @property {number} colors - Number of bytes for each pixel\n * @property {boolean} alpha - True when the image has an alpha transparency layer\n * @property {number[] | Uint8Array} palette - Raw Color data\n * @property {Uint8Array} pixels - Raw Image Pixel data\n * @property {Uint8Array} transparency - Raw Transparency data\n * @property {object} physical - Object containing physical dimension information\n * @property {number} physical.width - Physical Dimension Width\n * @property {number} physical.height - Physical Dimension Height\n * @property {number} physical.unit - Physical Dimension Units, with 0 being unknown and 1 being Meters\n * @property {Uint8Array[]} dataChunks - Image Data pieces\n * @property {Uint8Array} header - PNG Signature from the data\n * @see {@link http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html|Chunk Specifications}\n * @see {@link https://ucnv.github.io/pnglitch/|The Art of PNG Glitch}\n * @see {@link http://www.schaik.com/pngsuite/|PngSuite, test-suite for PNG}\n * @see {@link http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html|Chunk Specifications (LibPNG)}\n * @see {@link https://www.w3.org/TR/PNG-Chunks.html|Chunk Specifications (W3C)}\n * @see {@link http://www.simplesystems.org/libpng/FFFF/|PNGs containing a chunk with length 0xffffffff}\n * @see {@link https://github.com/jsummers/tweakpng|TweakPNG}\n * @example <caption>new ImagePNG(list, options)</caption>\n * const image_data = await FileUtility.readFile('./test/assets/PngSuite', 'oi1n0g16', 'png', null);\n * const image = ImagePNG.fromFile(image_data);\n * image.decodePixels();\n * const length = image.pixels.length;\n *  ➜ 6144\n * const pixel = image.getPixel(0, 0);\n *  ➜ [255, 255, 255, 255]\n * @class\n */\nclass ImagePNG extends DataStream {\n  /**\n   * Creates a new ImagePNG.\n   *\n   * @param {DataBufferList} list - The DataBufferList of the image to process.\n   * @param {object} [overrides] - Options for this instance.\n   * @param {number} [overrides.size=16] - ArrayBuffer byteLength for the underlying binary parsing.\n   * @class\n   */\n  constructor(list, overrides = {}) {\n    const options = {\n      size: 16,\n      ...overrides,\n    };\n    super(list, options);\n\n    // PNG Specific Details\n    this.width = 0;\n    this.height = 0;\n    this.bitDepth = 0;\n    this.colorType = 0;\n    this.compressionMethod = 0;\n    this.filterMethod = 0;\n    this.interlaceMethod = 0;\n\n    this.colors = 0;\n    this.alpha = false;\n\n    this.palette = [];\n    this.pixels = undefined;\n    this.transparency = undefined;\n\n    this.physical = {\n      width: 0,\n      height: 0,\n      unit: 0,\n    };\n\n    this.dataChunks = [];\n\n    this.parse();\n  }\n\n  /**\n   * Creates a new ImagePNG from file data.\n   *\n   * @param {Array|ArrayBuffer|Buffer|DataBuffer|Int8Array|Int16Array|number|string|Uint8Array|Uint32Array} data - The data of the image to process.\n   * @returns {ImagePNG} the new ImagePNG instance for the provided file data\n   * @static\n   */\n  static fromFile(data) {\n    debug('fromFile:', data.length, data.byteLength);\n    const buffer = new DataBuffer(data);\n    const list = new DataBufferList();\n    list.append(buffer);\n    return new ImagePNG(list, { size: buffer.length });\n  }\n\n  /**\n   * Creates a new ImagePNG from a DataBuffer.\n   *\n   * @param {DataBuffer} buffer - The DataBuffer of the image to process.\n   * @returns {ImagePNG} the new ImagePNG instance for the provided DataBuffer\n   * @static\n   */\n  static fromBuffer(buffer) {\n    debug('fromBuffer:', buffer.length);\n    const list = new DataBufferList();\n    list.append(buffer);\n    return new ImagePNG(list, { size: buffer.length });\n  }\n\n  /**\n   * Sets the bitDepth on the ImagePNG instance.\n   *\n   * @param {number} bitDepth - The bitDepth to set, one of: 1, 2, 4, 8, 16\n   */\n  setBitDepth(bitDepth) {\n    debug('setBitDepth:', bitDepth);\n    if (![1, 2, 4, 8, 16].includes(bitDepth)) {\n      throw new Error(`Invalid Bit Depth: ${bitDepth}, can be one of: 1, 2, 4, 8, 16`);\n    }\n    this.bitDepth = bitDepth;\n  }\n\n  /**\n   * Sets the colorType on the ImagePNG instance.\n   * Both color and alpha properties are inferred from the colorType.\n   *\n   * | Color Type | Allowed Bit Depths | Interpretation |\n   * |------------|--------------------|----------------|\n   * | 0          | 1, 2, 4, 8, 16     | Each pixel is a grayscale sample.\n   * | 2          | 8, 16              | Each pixel is an R, G, B triple.\n   * | 3          | 1, 2, 4, 8         | Each pixel is a palette index; a `PLTE` chunk must appear.\n   * | 4          | 8, 16              | Each pixel is a grayscale sample, followed by an alpha sample.\n   * | 6          | 8, 16              | Each pixel is an R, G, B triple, followed by an alpha sample.\n   *\n   * @param {number} colorType - The colorType to set, one of: 0, 2, 3, 4, 6\n   * @throws {Error} Invalid Color Type, anything other than 0, 2, 3, 4, 6\n   */\n  setColorType(colorType) {\n    debug('setColorType:', colorType);\n    let colors = 0;\n    let alpha = false;\n\n    switch (colorType) {\n      case 0: colors = 1; break;\n      case 2: colors = 3; break;\n      case 3: colors = 1; break;\n      case 4: colors = 2; alpha = true; break;\n      case 6: colors = 4; alpha = true; break;\n      default: throw new Error(`Invalid Color Type: ${colorType}, can be one of: 0, 2, 3, 4, 6`);\n    }\n\n    this.colors = colors;\n    this.alpha = alpha;\n    this.colorType = colorType;\n  }\n\n  /**\n   * Sets the compressionMethod on the ImagePNG instance.\n   * The compressionMethod should always be 0.\n   *\n   * @param {number} compressionMethod - The compressionMethod to set, always 0\n   * @throws {Error} Unsupported Compression Method, anything other than 0\n   */\n  setCompressionMethod(compressionMethod) {\n    debug('setCompressionMethod:', compressionMethod);\n    if (compressionMethod !== 0) {\n      throw new Error(`Unsupported Compression Method: ${compressionMethod}, should be 0`);\n    }\n    this.compressionMethod = compressionMethod;\n  }\n\n  /**\n   * Sets the filterMethod on the ImagePNG instance.\n   * The filterMethod should always be 0.\n   *\n   * @param {number} filterMethod - The filterMethod to set, always 0\n   * @throws {Error} Unsupported Filter Method, anything other than 0\n   */\n  setFilterMethod(filterMethod) {\n    debug('setFilterMethod:', filterMethod);\n    if (filterMethod !== 0) {\n      throw new Error(`Unsupported Filter Method: ${filterMethod}, should be 0`);\n    }\n    this.filterMethod = filterMethod;\n  }\n\n  /**\n   * Sets the interlaceMethod on the ImagePNG instance.\n   * The interlaceMethod should always be 0 or 1.\n   *\n   * @param {number} interlaceMethod - The filterMethod to set, always 0 or 1\n   * @throws {Error} Unsupported Interlace Method, anything other than 0 or 1\n   */\n  setInterlaceMethod(interlaceMethod) {\n    debug('setInterlaceMethod:', interlaceMethod);\n    if (interlaceMethod !== 0 && interlaceMethod !== 1) {\n      throw new Error(`Unsupported Interlace Method: ${interlaceMethod}`);\n    }\n    this.interlaceMethod = interlaceMethod;\n  }\n\n  /**\n   * Sets the palette on the ImagePNG instance.\n   *\n   * @param {number[] | Uint8Array} palette - The palette to set\n   * @throws {Error} No colors in the palette\n   * @throws {Error} Too many colors for the current bit depth\n   */\n  setPalette(palette) {\n    debug('setPalette:', palette);\n    if (!Array.isArray(palette) && !ArrayBuffer.isView(palette)) {\n      debug('Invalid palette provided.');\n      return;\n    }\n    if (palette.length === 0) {\n      throw new Error('Palette contains no colors');\n    }\n    if (palette.length > (2 ** (this.bitDepth) * 3)) {\n      throw new Error(`Palette contains more colors than ${2 ** (this.bitDepth) * 3} ((2 ^ ${this.bitDepth}) * 3)`);\n    }\n    this.palette = palette;\n  }\n\n  /**\n   * Get the pixel color at a specified x, y location.\n   *\n   * @param {number} x - The hoizontal offset to read.\n   * @param {number} y - The vertical offset to read.\n   * @returns {Array} the color as [red, green, blue, alpha]\n   * @throws {Error} x is out of bound for the image\n   * @throws {Error} y is out of bound for the image\n   * @throws {Error} Unknown color types\n   */\n  getPixel(x, y) {\n    if (!this.pixels) {\n      throw new Error('Pixel data has not been decoded.');\n    }\n    if (!Number.isInteger(x) || x >= this.width || x < 0) {\n      throw new Error(`x position out of bounds or invalid: ${x}`);\n    }\n    if (!Number.isInteger(y) || y >= this.height || y < 0) {\n      throw new Error(`y position out of bounds or invalid: ${y}`);\n    }\n    debug('getPixel x:', x, 'y:', y, 'colorType:', this.colorType, 'colors:', this.colors, 'bitDepth:', this.bitDepth);\n    // const i = (y * this.width + x) * this.bitDepth;\n    // const i = (this.colors * this.bitDepth) / (8 * (y * this.width + x));\n    const i = ((this.colors * this.bitDepth) / 8) * (y * this.width + x);\n\n    debug('index:', i);\n    switch (this.colorType) {\n      case 0: {\n        return [this.pixels[i], this.pixels[i], this.pixels[i], 255];\n      }\n      case 2: {\n        return [this.pixels[i], this.pixels[i + 1], this.pixels[i + 2], 255];\n      }\n      case 3: {\n        let alpha = 255;\n        if (this.transparency != null && this.transparency[this.pixels[i]] != null) {\n          alpha = this.transparency[this.pixels[i]];\n        }\n        return [\n          this.palette[this.pixels[i] * 3 + 0],\n          this.palette[this.pixels[i] * 3 + 1],\n          this.palette[this.pixels[i] * 3 + 2],\n          alpha,\n        ];\n      }\n      case 4: {\n        // For 16 bitDepth grey image we need to pick up lower 8 bit for each pixel.\n        if (this.bitDepth === 8) {\n          return [this.pixels[i], this.pixels[i], this.pixels[i], this.pixels[i + 1]];\n        }\n        return [this.pixels[i + 1], this.pixels[i + 1], this.pixels[i + 1], this.pixels[i + 3]];\n      }\n      case 6: {\n        // For 16 bitDepth grey image we need to pick up lower 8 bit for each pixel.\n        if (this.bitDepth === 8) {\n          return [this.pixels[i], this.pixels[i + 1], this.pixels[i + 2], this.pixels[i + 3]];\n        }\n        return [this.pixels[i + 1], this.pixels[i + 3], this.pixels[i + 5], this.pixels[i + 7]];\n      }\n      default: {\n        throw new Error(`Unknown Color Type: ${this.colorType}`);\n      }\n    }\n  }\n\n  /**\n   * Parse the PNG file, decoding the supported chunks.\n   */\n  parse() {\n    debug('parse');\n    this.decodeHeader();\n\n    while (this.remainingBytes()) {\n      const type = this.decodeChunk();\n      // Stop after IEND\n      if (type === 'IEND') {\n        const leftover = this.remainingBytes();\n        // TODO: Find a PNG file with other data types in it?\n        /* istanbul ignore next */\n        if (leftover) {\n          debug('ending with data left:', leftover, 'bytes left');\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Decodes and validates PNG Header.\n   * Signature (Decimal): [137, 80, 78, 71, 13, 10, 26, 10]\n   * Signature (Hexadecimal): [89, 50, 4E, 47, 0D, 0A, 1A, 0A]\n   * Signature (ASCII): [\\211, P, N, G, \\r, \\n, \\032, \\n]\n   *\n   * @throws {Error} Missing or invalid PNG header\n   * @see {@link http://www.w3.org/TR/2003/REC-PNG-20031110/#5PNG-file-signature|PNG Signature}\n   */\n  decodeHeader() {\n    debug('decodeHeader: offset =', this.offset);\n    /* istanbul ignore next */\n    if (this.offset !== 0) {\n      debug('Offset should be at 0 to read the header.');\n    }\n\n    const header = this.read(8, this.nativeEndian);\n    const header_buffer = new DataBuffer(header);\n    if (!header_buffer.compare([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n      throw new Error('Missing or invalid PNG header.');\n    }\n\n    this.header = header;\n  }\n\n  /**\n   * Decodes the chunk type, and attempts to parse that chunk if supported.\n   * Supported Chunk Types: IHDR, PLTE, IDAT, IEND, tRNS, pHYs\n   *\n   * Chunk Structure:\n   * Length: 4 bytes\n   * Type:   4 bytes (IHDR, PLTE, IDAT, IEND, etc.)\n   * Chunk:  {length} bytes\n   * CRC:    4 bytes\n   *\n   * @returns {string} Chunk Type\n   * @throws {Error} Invalid Chunk Length when less than 0\n   * @see {@link http://www.w3.org/TR/2003/REC-PNG-20031110/#5Chunk-layout|Chunk Layout}\n   */\n  decodeChunk() {\n    debug('decodeChunk');\n    const length = this.readUInt32();\n\n    /* istanbul ignore next */\n    if (length < 0) {\n      throw new Error(`Invalid Chunk Length: ${0xFFFFFFFF & length}`);\n    }\n\n    const type = this.readString(4);\n    const chunk = this.read(length, this.nativeEndian);\n    const crc = this.readUInt32();\n\n    debug('decodeChunk type', type, 'chunk size', length, 'crc', crc.toString(16).toUpperCase());\n    switch (type) {\n      case 'IHDR': this.decodeIHDR(chunk); break;\n      case 'PLTE': this.decodePLTE(chunk); break;\n      case 'IDAT': this.decodeIDAT(chunk); break;\n      case 'IEND': this.decodeIEND(chunk); break;\n      case 'tRNS': this.decodeTRNS(chunk); break;\n      case 'pHYs': this.decodePHYS(chunk); break;\n      // case 'cHRM': decodeCHRM(chunk); break;\n      // case 'gAMA': decodeGAMA(chunk); break;\n      // case 'bKGD': decodeBKGD(chunk); break;\n      // case 'tIME': decodeTIME(chunk); break;\n      // case 'tEXt': decodeTEXT(chunk); break;\n      // case 'iTXt': decodeITXT(chunk); break;\n      // case 'sRGB': decodeSRGB(chunk); break;\n      // case 'sBIT': decodeSBIT(chunk); break;\n      default:\n        debug(`Unsupported Chunk: '${type}'`);\n        break;\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode the IHDR (Image header) chunk.\n   * Should be the first chunk in the data stream.\n   *\n   * Width:              4 bytes\n   * Height:             4 bytes\n   * Bit Depth:          1 byte\n   * Colour Type:        1 byte\n   * Compression Method: 1 byte\n   * Filter Method:      1 byte\n   * Interlace Method:   1 byte\n   *\n   * @param {Uint8Array} chunk - Data Blob\n   * @see {@link http://www.w3.org/TR/2003/REC-PNG-20031110/#11IHDR|Image Header}\n   * @see {@link http://www.libpng.org/pub/png/spec/1.2/png-1.2-pdg.html#C.IHDR|Image Header}\n   */\n  decodeIHDR(chunk) {\n    debug('decodeIHDR');\n    const header = DataStream.fromData(chunk);\n\n    const width = header.readUInt32();\n    const height = header.readUInt32();\n    const bit_depth = header.readUInt8();\n    const color_type = header.readUInt8();\n    const compression_method = header.readUInt8();\n    const filter_method = header.readUInt8();\n    const interlace_method = header.readUInt8();\n\n    this.width = width;\n    this.height = height;\n    this.setBitDepth(bit_depth);\n    this.setColorType(color_type);\n    this.setCompressionMethod(compression_method);\n    this.setFilterMethod(filter_method);\n    this.setInterlaceMethod(interlace_method);\n\n    debug('decodeIHDR =', JSON.stringify({ width, height, bit_depth, color_type, compression_method, filter_method, interlace_method }));\n  }\n\n  /**\n   * Decode the PLTE (Palette) chunk.\n   * The PLTE chunk contains from 1 to 256 palette entries, each a three-byte series of the form.\n   * The number of entries is determined from the chunk length. A chunk length not divisible by 3 is an error.\n   *\n   * @param {Uint8Array} chunk - Data Blob\n   * @see {@link http://www.w3.org/TR/PNG/#11PLTE|Palette}\n   */\n  decodePLTE(chunk) {\n    debug('decodePLTE');\n    this.setPalette(chunk);\n  }\n\n  /**\n   * Decode the IDAT (Image Data) chunk.\n   * The IDAT chunk contains the actual image data which is the output stream of the compression algorithm.\n   *\n   * @param {Uint8Array} chunk - Data Blob\n   * @see {@link http://www.w3.org/TR/2003/REC-PNG-20031110/#11IDAT|Image Data}\n   */\n  decodeIDAT(chunk) {\n    debug('decodeIDAT:', chunk.length, 'bytes');\n    this.dataChunks.push(chunk);\n  }\n\n  /**\n   * Decode the tRNS (Transparency) chunk.\n   * The tRNS chunk specifies that the image uses simple transparency: either alpha values associated with palette entries (for indexed-color images) or a single transparent color (for grayscale and truecolor images). Although simple transparency is not as elegant as the full alpha channel, it requires less storage space and is sufficient for many common cases.\n   *\n   * @param {Uint8Array} chunk - Data Blob\n   * @see {@link https://www.w3.org/TR/PNG/#11tRNS|Transparency}\n   */\n  decodeTRNS(chunk) {\n    debug('decodeTRNS');\n    this.transparency = chunk;\n  }\n\n  /**\n   * Decode the pHYs (Pixel Dimensions) chunk.\n   * The pHYs chunk specifies the intended pixel size or aspect ratio for display of the image.\n   * When the unit specifier is 0, the pHYs chunk defines pixel aspect ratio only; the actual size of the pixels remains unspecified.\n   * If the pHYs chunk is not present, pixels are assumed to be square, and the physical size of each pixel is unspecified.\n   *\n   * Structure:\n   * Pixels per unit, X axis: 4 bytes (unsigned integer)\n   * Pixels per unit, Y axis: 4 bytes (unsigned integer)\n   * Unit specifier:          1 byte\n   * 0: unit is unknown\n   * 1: unit is the meter\n   *\n   * @param {Uint8Array} chunk - Data Blob\n   * @see {@link https://www.w3.org/TR/PNG/#11pHYs|Pixel Dimensions}\n   */\n  decodePHYS(chunk) {\n    const INCH_TO_METERS = 0.0254;\n    const buffer = DataStream.fromData(chunk);\n    let width = buffer.readUInt32();\n    let height = buffer.readUInt32();\n    const unit = buffer.readUInt8();\n\n    switch (unit) {\n      case 1: {\n        width = Math.floor(width * INCH_TO_METERS);\n        height = Math.floor(height * INCH_TO_METERS);\n        break;\n      }\n      /* istanbul ignore next */\n      default: {\n        break;\n      }\n    }\n\n    this.physical = { width, height, unit };\n  }\n\n  /**\n   * Decode the IEND (Image trailer) chunk.\n   * The IEND chunk marks the end of the PNG datastream. The chunk's data field is empty.\n   *\n   * @param {Uint8Array} _chunk - Unused.\n   * @see {@link http://www.w3.org/TR/2003/REC-PNG-20031110/#11IEND|Image Trailer}\n   */\n  // eslint-disable-next-line class-methods-use-this\n  decodeIEND(_chunk) {\n    debug('decodeIEND');\n  }\n\n  /**\n   * Uncompress IDAT chunks.\n   *\n   * @throws {Error} No IDAT chunks to decode\n   * @throws {Error} Deinterlacing Error\n   * @throws {Error} Inflating Error\n   * @throws {Error} Adam7 interlaced format is unsupported\n   */\n  decodePixels() {\n    debug('decodePixels');\n    if (this.dataChunks.length === 0) {\n      throw new Error('No IDAT chunks to decode.');\n    }\n    const length = this.dataChunks.reduce((accumulator, chunk) => accumulator + chunk.length, 0);\n    debug('Data Chunks Total Size:', length);\n    const data = new Uint8Array(length);\n    for (let i = 0, k = 0, l = this.dataChunks.length; i < l; i++) {\n      const chunk = this.dataChunks[i];\n      for (let j = 0; j < chunk.length; j++) {\n        data[k++] = chunk[j];\n      }\n    }\n\n    let out;\n    try {\n      out = zlib.inflateSync(data);\n    } catch (err) {\n      /* istanbul ignore next */\n      debug('Error Inflating:', err);\n      /* istanbul ignore next */\n      throw err;\n    }\n    debug('Inflated Size:', out.length);\n    // debug('Inflated:', out);\n\n    try {\n      /* istanbul ignore else */\n      if (this.interlaceMethod === 0) {\n        this.interlaceNone(out);\n      } else {\n        // https://github.com/em2046/lens/blob/master/assets/js/interlace.js\n        // https://github.com/em2046/aperture/tree/master/lib/png/chunks\n        // https://github.com/beejjorgensen/jsmandel/blob/master/src/js/adam7.js\n        // http://diyhpl.us/~yenatch/pokecrystal/src/pypng/code/png.py\n        // https://github.com/SixLabors/ImageSharp/blob/master/src/ImageSharp/Formats/Png/Adam7.cs\n        throw new Error('Adam7 interlaced format is unsupported.');\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      debug('Error Deinterlacing:', e);\n      /* istanbul ignore next */\n      throw e;\n    }\n  }\n\n  /**\n   * Deinterlace with no interlacing.\n   *\n   * @param {Buffer} data - Data to deinterlace.\n   * @see {@link https://www.w3.org/TR/PNG-Filters.html|PNG Filters}\n   */\n  interlaceNone(data) {\n    const bytes_per_pixel = Math.max(1, (this.colors * this.bitDepth) / 8);\n    const color_bytes_per_row = bytes_per_pixel * this.width;\n\n    this.pixels = new Uint8Array(bytes_per_pixel * this.width * this.height);\n\n    const chunk = DataStream.fromData(data);\n    debug('interlaceNone: bytes:', chunk.remainingBytes(), 'bytes_per_pixel:', bytes_per_pixel, 'color_bytes_per_row:', color_bytes_per_row);\n    let offset = 0;\n    while (chunk.remainingBytes() > 0) {\n      const type = chunk.readUInt8();\n      const scanline = chunk.remainingBytes() < color_bytes_per_row ? chunk.read(chunk.remainingBytes(), this.nativeEndian) : chunk.read(color_bytes_per_row, this.nativeEndian);\n      // debug('chunk filter type:', type);\n      switch (type) {\n        case 0: {\n          this.unFilterNone(scanline, bytes_per_pixel, offset, color_bytes_per_row);\n          break;\n        }\n        case 1: {\n          this.unFilterSub(scanline, bytes_per_pixel, offset, color_bytes_per_row);\n          break;\n        }\n        case 2: {\n          this.unFilterUp(scanline, bytes_per_pixel, offset, color_bytes_per_row);\n          break;\n        }\n        case 3: {\n          this.unFilterAverage(scanline, bytes_per_pixel, offset, color_bytes_per_row);\n          break;\n        }\n        case 4: {\n          this.unFilterPaeth(scanline, bytes_per_pixel, offset, color_bytes_per_row);\n          break;\n        }\n        default: {\n          debug(`Unknown filtered scanline type: '${type}', at offset`, offset);\n        }\n      }\n      offset += chunk.offset;\n      // debug('chunk.remainingBytes()', chunk.remainingBytes());\n    }\n  }\n\n  // Unfiltering\n\n  /**\n   * No filtering, direct copy.\n   *\n   * @param {Array|Uint8Array} scanline - Scanline to search for pixels in.\n   * @param {number} bpp - Bytes Per Pixel\n   * @param {number} offset - Offset\n   * @param {number} length - Length\n   */\n  unFilterNone(scanline, bpp, offset, length) {\n    debug('unFilterNone:', 'bpp:', bpp, 'offset:', offset, 'length:', length);\n    for (let i = 0, to = length; i < to; i++) {\n      // debug(`this.pixels[${offset + i}] = ${scanline[i]}`);\n      this.pixels[offset + i] = scanline[i];\n    }\n  }\n\n  /**\n   * The Sub() filter transmits the difference between each byte and the value of the corresponding byte of the prior pixel.\n   * Sub(x) = Raw(x) + Raw(x - bpp)\n   *\n   * @param {Array|Uint8Array} scanline - Scanline to search for pixels in.\n   * @param {number} bpp - Bytes Per Pixel\n   * @param {number} offset - Offset\n   * @param {number} length - Length\n   */\n  unFilterSub(scanline, bpp, offset, length) {\n    debug('unFilterSub:', 'bpp:', bpp, 'offset:', offset, 'length:', length);\n    let i = 0;\n    for (; i < bpp; i++) {\n      // debug(`this.pixels[${offset + i}] = ${scanline[i]}`);\n      this.pixels[offset + i] = scanline[i];\n    }\n    for (; i < length; i++) {\n      // Raw(x) + Raw(x - bpp)\n      // debug(`this.pixels[${offset + i}] = ${(scanline[i] + this.pixels[offset + i - bpp]) & 0xFF}`);\n      this.pixels[offset + i] = (scanline[i] + this.pixels[offset + i - bpp]) & 0xFF;\n    }\n  }\n\n  /**\n   * The Up() filter is just like the Sub() filter except that the pixel immediately above the current pixel, rather than just to its left, is used as the predictor.\n   * Up(x) = Raw(x) + Prior(x)\n   *\n   * @param {Array|Uint8Array} scanline - Scanline to search for pixels in.\n   * @param {number} _bpp - Bytes Per Pixel, Unused\n   * @param {number} offset - Offset\n   * @param {number} length - Length\n   */\n  /* istanbul ignore next */\n  unFilterUp(scanline, _bpp, offset, length) {\n    debug('unFilterUp:', 'offset:', offset, 'length:', length);\n    let i = 0;\n    let byte;\n    let prev;\n    // Prior(x) is 0 for all x on the first scanline\n    if ((offset - length) < 0) {\n      for (; i < length; i++) {\n        this.pixels[offset + i] = scanline[i];\n      }\n    } else {\n      for (; i < length; i++) {\n      // Raw(x)\n        byte = scanline[i];\n        // Prior(x)\n        prev = this.pixels[offset + i - length];\n        this.pixels[offset + i] = (byte + prev) & 0xFF;\n      }\n    }\n  }\n\n  /**\n   * The Average() filter uses the average of the two neighboring pixels (left and above) to predict the value of a pixel.\n   * Average(x) = Raw(x) + floor((Raw(x-bpp)+Prior(x))/2)\n   *\n   * @param {Array|Uint8Array} scanline - Scanline to search for pixels in.\n   * @param {number} bpp - Bytes Per Pixel\n   * @param {number} offset - Offset\n   * @param {number} length - Length\n   */\n  /* istanbul ignore next */\n  unFilterAverage(scanline, bpp, offset, length) {\n    debug('unFilterAverage:', 'bpp:', bpp, 'offset:', offset, 'length:', length);\n    let i = 0; let byte; let prev; let\n      prior;\n    if ((offset - length) < 0) {\n      // Prior(x) == 0 && Raw(x - bpp) == 0\n      for (; i < bpp; i++) {\n        this.pixels[offset + i] = scanline[i];\n      }\n      // Prior(x) == 0 && Raw(x - bpp) != 0 (right shift, prevent doubles)\n      for (; i < length; i++) {\n        this.pixels[offset + i] = (scanline[i] + (this.pixels[offset + i - bpp] >> 1)) & 0xFF;\n      }\n    } else {\n      // Prior(x) != 0 && Raw(x - bpp) == 0\n      for (; i < bpp; i++) {\n        this.pixels[offset + i] = (scanline[i] + (this.pixels[offset - length + i] >> 1)) & 0xFF;\n      }\n      // Prior(x) != 0 && Raw(x - bpp) != 0\n      for (; i < length; i++) {\n        byte = scanline[i];\n        prev = this.pixels[offset + i - bpp];\n        prior = this.pixels[offset + i - length];\n        this.pixels[offset + i] = (byte + (prev + prior >> 1)) & 0xFF;\n      }\n    }\n  }\n\n  /**\n   * The Paeth() filter computes a simple linear function of the three neighboring pixels (left, above, upper left), then chooses as predictor the neighboring pixel closest to the computed value.\n   * This technique was developed by Alan W. Paeth.\n   * Paeth(x) = Raw(x) + PaethPredictor(Raw(x-bpp), Prior(x), Prior(x-bpp))\n   *  function PaethPredictor (a, b, c)\n   *  begin\n   *       ; a = left, b = above, c = upper left\n   *       p := a + b - c        ; initial estimate\n   *       pa := abs(p - a)      ; distances to a, b, c\n   *       pb := abs(p - b)\n   *       pc := abs(p - c)\n   *       ; return nearest of a,b,c,\n   *       ; breaking ties in order a,b,c.\n   *       if pa <= pb AND pa <= pc then return a\n   *       else if pb <= pc then return b\n   *       else return c\n   *  end\n   *\n   * @param {Array|Uint8Array} scanline - Scanline to search for pixels in.\n   * @param {number} bpp - Bytes Per Pixel\n   * @param {number} offset - Offset\n   * @param {number} length - Length\n   */\n  /* istanbul ignore next */\n  unFilterPaeth(scanline, bpp, offset, length) {\n    debug('unFilterPaeth:', 'bpp:', bpp, 'offset:', offset, 'length:', length);\n    let i = 0;\n    let raw;\n    let a;\n    let b;\n    let c;\n    let p;\n    let pa;\n    let pb;\n    let pc;\n    let pr;\n    if ((offset - length) < 0) {\n      // Prior(x) == 0 && Raw(x - bpp) == 0\n      for (; i < bpp; i++) {\n        this.pixels[offset + i] = scanline[i];\n      }\n      // Prior(x) == 0 && Raw(x - bpp) != 0\n      // paethPredictor(x, 0, 0) is always x\n      for (; i < length; i++) {\n        this.pixels[offset + i] = (scanline[i] + this.pixels[offset + i - bpp]) & 0xFF;\n      }\n    } else {\n      // Prior(x) != 0 && Raw(x - bpp) == 0\n      // paethPredictor(x, 0, 0) is always x\n      for (; i < bpp; i++) {\n        this.pixels[offset + i] = (scanline[i] + this.pixels[offset + i - length]) & 0xFF;\n      }\n      // Prior(x) != 0 && Raw(x - bpp) != 0\n      for (; i < length; i++) {\n        raw = scanline[i];\n        a = this.pixels[offset + i - bpp];\n        b = this.pixels[offset + i - length];\n        c = this.pixels[offset + i - length - bpp];\n        p = a + b - c;\n        pa = Math.abs(p - a);\n        pb = Math.abs(p - b);\n        pc = Math.abs(p - c);\n        if (pa <= pb && pa <= pc) pr = a;\n        else if (pb <= pc) pr = b;\n        else pr = c;\n        this.pixels[offset + i] = (raw + pr) & 0xFF;\n      }\n    }\n  }\n}\n\nmodule.exports = ImagePNG;\n"],"names":["adler32","adler","buf","len","pos","s1","s2","n","adler32_1","makeTable","c","table","k","crcTable","Uint32Array","crc32","crc","t","end","i","crc32_1","BAD","TYPE","inffast","inflate_fast","strm","start","_in","last","_out","beg","dmax","wsize","whave","wnext","s_window","hold","bits","lcode","dcode","lmask","dmask","here","op","dist","from","from_source","input","output","state","next_in","avail_in","next_out","avail_out","window","lencode","distcode","lenbits","distbits","top","dolen","dodist","msg","mode","sane","MAXBITS","ENOUGH_LENS","ENOUGH_DISTS","CODES","LENS","DISTS","lbase","Uint16Array","lext","Uint8Array","dbase","dext","inflate_table","type","lens","lens_index","codes","table_index","work","opts","sym","min","max","root","curr","drop","left","used","huff","incr","fill","low","mask","next","base","base_index","count","offs","extra","extra_index","here_bits","here_op","here_val","inftrees","constants","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","require$$0","require$$1","require$$2","require$$3","require$$4","HEAD","FLAGS","TIME","OS","EXLEN","EXTRA","NAME","COMMENT","HCRC","DICTID","DICT","TYPEDO","STORED","COPY_","COPY","TABLE","LENLENS","CODELENS","LEN_","LEN","LENEXT","DIST","DISTEXT","MATCH","LIT","CHECK","LENGTH","DONE","MEM","SYNC","MAX_WBITS","DEF_WBITS","zswap32","q","InflateState","wrap","havedict","flags","check","total","head","wbits","length","offset","ncode","nlen","ndist","have","lendyn","distdyn","back","was","inflateResetKeep","total_in","total_out","Int32Array","inflateReset","inflateReset2","windowBits","inflateInit2","ret","inflateInit","virgin","lenfix","distfix","fixedtables","updatewindow","src","copy","set","subarray","inflate","flush","put","last_bits","last_op","last_val","hbuf","order","inf_leave","done","text","time","xflags","os","extra_len","name","String","fromCharCode","comment","hcrc","data_type","inflateEnd","inflateGetHeader","inflateSetDictionary","dictionary","dictLength","dictid","_has","obj","key","Object","prototype","hasOwnProperty","call","sources","Array","slice","arguments","source","shift","TypeError","p","chunks","l","result","chunk","STR_APPLY_UIA_OK","apply","__","_utf8len","str","c2","m_pos","str_len","buf_len","charCodeAt","buf2binstring","out","utf16buf","c_len","messages","ZStream","zstream","GZheader","gzheader","zlib_inflate","utils","strings","require$$5","toString","require$$6","Inflate","options","assign","chunkSize","to","opt","raw","err","ended","status","Error","header","string2buf","push","data","flush_mode","_flush_mode","last_avail_out","onEnd","next_out_utf8","utf8border","tail","utf8str","buf2string","onData","join","flattenChunks","inflator","inflateRaw","DataBuffer","constructor","error","Buffer","isBuffer","ArrayBuffer","isArray","buffer","byteOffset","BYTES_PER_ELEMENT","prev","allocate","size","compare","local","position","dataBuffer","debug","DataBufferList","buffers","first","totalBuffers","availableBytes","availableBuffers","append","moreAvailable","advance","rewind","reset","dataBufferList","UnderflowError","message","stack","captureStackTrace","DataStream","list","uint8","int8","Int8Array","uint16","int16","Int16Array","uint32","int32","float32","Float32Array","float64","Float64Array","int64","BigInt64Array","uint64","BigUint64Array","nativeEndian","localOffset","fromData","fromBuffer","seek","external","readUInt8","available","remainingBytes","peekUInt8","bytes","availableAt","read","littleEndian","peek","peekBit","Number","isNaN","isInteger","value","readInt8","peekInt8","readUInt16","peekUInt16","readInt16","peekInt16","readUInt24","peekUInt24","readInt24","peekInt24","readUInt32","peekUInt32","readInt32","peekInt32","readFloat32","peekFloat32","readFloat48","float48","peekFloat48","readFloat64","peekFloat64","readFloat80","float80","peekFloat80","readBuffer","peekBuffer","readSingleBuffer","peekSingleBuffer","readString","encoding","decodeString","peekString","mantissa","exponent","parseFloat","toFixed","high","a0","a1","sign","POSITIVE_INFINITY","NaN","toLowerCase","nullEnd","char","b1","b2","b3","b4","pt","bom","w1","w2","dataStream","ImagePNG","overrides","width","height","bitDepth","colorType","compressionMethod","filterMethod","interlaceMethod","colors","alpha","palette","pixels","undefined","transparency","physical","unit","dataChunks","parse","fromFile","byteLength","setBitDepth","includes","setColorType","setCompressionMethod","setFilterMethod","setInterlaceMethod","setPalette","isView","getPixel","x","y","decodeHeader","decodeChunk","header_buffer","toUpperCase","decodeIHDR","decodePLTE","decodeIDAT","decodeIEND","decodeTRNS","decodePHYS","bit_depth","color_type","compression_method","filter_method","interlace_method","JSON","stringify","INCH_TO_METERS","Math","floor","_chunk","decodePixels","reduce","accumulator","j","interlaceNone","e","bytes_per_pixel","color_bytes_per_row","scanline","unFilterNone","unFilterSub","unFilterUp","unFilterAverage","unFilterPaeth","bpp","_bpp","byte","prior","a","b","pa","pb","pc","pr","abs","dataImagePng"],"mappings":"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"}